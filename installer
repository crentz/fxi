#!/bin/bash

CONF=disk.conf
rsync_excludes=${rsync_excludes:="/usr/share/fx/installer/exclude.list"}
error_log=${error_log:="~/installer_error.log"}

welcome_msg () {
echo
printf '%s\n' "Welcome to Fluxuan Linux Installer, i hope this installer will be fast and easy to use.

This installer will guide you to the rest of the setup process.

Thank you for your interest in Fluxuan Linux.

https://Fluxuan.org - https://Forums.Fluxuan.org"
sleep 5
}

check_root (){
[[ $(id -u) -eq 0 ]] || { echo -e "\t You need to be root - use sudo!\n" ; exit 1 ; }
}

check_exit () {
exit_code="$?"
[[ $exit_code -eq 0 ]] || { echo "
  
  Exit due to error:  $exit_code
  See $error_log for details.
  "
  exit 1 ; }
}

error_log () {
# Record errors in a logfile.
exec 2>"$error_log"

if [[ $DEBUG = "yes" ]] ; then
	set -x
fi
}

# writing to disk.conf
d_conf() {
	local _conf=$1 _value=$2
	printf '%s\n' "${_conf}=${_value}" >> "$CONF"
}

# Parsing values from disk.conf
d_read() {
	local _conf=$1
	grep "${_conf}" "$CONF" | cut -d '=' -f2
}

install_dep () {
apt update && apt install arch-install-scripts -y -qq
check_exit
clear
}



# function to exit the script if there are errors

mk_disk() {
	clear
	echo
	printf '%s\n' "Disk partitioning. 
	Your available devices are: "
	echo
	lsblk -lp | awk '/disk/ { print $1, "(" $4 ")" }' | cut -d '/' -f3
	echo
	read -r -p "Which disk should the system be installed on? (e.g. sdX): " disk
	d_conf DISK "$disk"
	echo
	read -r -p "Will you boot in bios or EFI mode (-- write bios or EFI --)? " mode
	d_conf MODE "$mode"
	echo
	printf '%s\n' "Custom partitioning schemes are not yet supported.
	The default scheme will be:
###################################################################################



a 200mb Boot Partition on /dev/${disk}1

a SWAP Partition of your choosing on /dev/${disk}2

a Root Partition of the remaining space on /dev/${disk}3



###################################################################################"
	echo
	read -r -p "Proceed? (all data on $disk will be deleted, so make sure you backed up anything important) (Y/n): " yesno
	if [ "$yesno" == "no" ]; then
		printf '%s\n' "Exiting script... Start again."
		rm "$CONF"
	else
		d_conf BOOTP "$disk"1
		d_conf SWAPS "$disk"2
		d_conf ROOTP "$disk"3
	fi
	check_exit
}

ask_part() {
	echo
	read -r -p "Choose the size of swap in GB (e.g. 2): " swaps
	d_conf SWAPS "$swaps"
}

# Partitioning disk and running mkfs.
mk_part() {
	local _disk _mode _swaps _roots
	_disk=$(d_read DISK)
	_mode=$(d_read MODE)
	_swaps=$(d_read SWAPS)
	
	echo
	printf '%s\n' "Partitioning /dev/$_disk."
	umount /dev/"$_disk" && sleep 2
	dd bs=512 count=50 if=/dev/zero of=/dev/"$_disk" && sleep 2
	sfdisk --delete /dev/"$_disk" && sleep 1
	partx /dev/"$_disk" && sleep 1
	if [ "$_mode" == "bios" ]; then
		(echo o) | fdisk /dev/"$_disk"
		(echo n; echo p; echo 1; echo ; echo +200M; echo n; echo p; echo 2; echo ; echo ; echo a; echo 1; echo p; echo w; echo q) | fdisk /dev/"$_disk"
		sfdisk -A /dev/"$_disk" 1	
	else
				
				(echo g) | fdisk /dev/"$_disk"
		(echo n; echo p; echo 1; echo ; echo +200M; echo n; echo p; echo 2; echo ; echo ; echo a; echo 1; echo p; echo w; echo q) | fdisk /dev/"$_disk"
		fdisk --part-type /dev/"$_disk" 1 EF
		
	fi		
	(echo n; echo p; echo 2; echo ; echo +"$_swaps"G; echo w) | fdisk /dev/"$_disk"
	sfdisk --part-type /dev/"$_disk" 2 82
	(echo n; echo p; echo 3; echo ; echo ; echo w) | fdisk /dev/"$_disk"
	partx /dev/"$_disk" && sleep 1
	printf '%s\n' "Creating Partitions on /dev/$_disk" && sleep 1
	if [ "$_mode" == "bios" ]; then
		mkfs.ext4 /dev/"$_disk"1
	else
		mkfs.fat -F 32 /dev/"$_disk"1
	fi
	mkswap /dev/"$_disk"2
	swapon /dev/"$_disk"2
	mkfs.ext4 /dev/"$_disk"3
	printf '%s\n' "Mounting Partitions" && sleep 1
	mount /dev/"$_disk"3 /mnt
	if [ "$_mode" == "bios" ]; then
		mkdir -p /mnt/boot
		mount /dev/"$_disk"1 /mnt/boot
	else
		mkdir -p /mnt/boot/efi
		mount /dev/"$_disk"1 /mnt/boot/efi
	fi
	check_exit
	clear
}

check_excludes () {
if ! [[ -f  $rsync_excludes ]] ; then
    rsync_excludes="$(pwd)/exclude.list"
    sleep 2
    cat > "$rsync_excludes" <<EOF
# It is safe to delete this file after installation.
- /dev/*
- /cdrom/*
- /media/*
- /target
- /swapfile
- /mnt/*
- /sys/*
- /proc/*
- /tmp/*
- /live
- /boot/grub/grub.cfg
- /boot/grub/menu.lst
- /boot/grub/device.map
- /etc/udev/rules.d/70-persistent-cd.rules
- /etc/udev/rules.d/70-persistent-net.rules
- /etc/fstab
- /etc/mtab
- /home/snapshot
- /home/*/.gvfs
- /usr/bin/fxw
- /usr/share/fx/installer
EOF
check_exit
chmod 666 "$rsync_excludes"
fi 
}

copy_sys () {
# copy everything over except the things listed in the exclude list
echo -e "\n Installing Fluxuan to your new partition...\n"
rsync -aAXv / /mnt/ --filter='P lost+found' --filter='H lost+found' --exclude-from="$rsync_excludes" --delete-excluded --info=progress2

# copy the real update-initramfs back in place
echo -e "\n Copying update-initramfs...\n"
if [[ -f /mnt/usr/sbin/update-initramfs.distrib ]] ; then
    cp /mnt/usr/sbin/update-initramfs.distrib /mnt/usr/sbin/update-initramfs
fi
if [[ -f /mnt/usr/sbin/update-initramfs.debian ]] ; then
    cp /mnt/usr/sbin/update-initramfs.debian /mnt/usr/sbin/update-initramfs
fi
check_exit
clear
}

gen_fstab() {
	echo
	printf '%s\n' "Generating fstab..." && sleep 1
	genfstab -U /mnt >> /mnt/etc/fstab
	check_exit
}

timezone() {
	echo
	printf '%s\n' "Setting timezone..." && sleep 1
	arch-chroot /mnt dpkg-reconfigure tzdata
	check_exit
}

locales() {
	sleep 1 && echo
	printf "Setting locale..." && sleep 1
	arch-chroot /mnt dpkg-reconfigure locales
	check_exit
}

set_hostname() {
	echo
	read -r -p "Hostname for this machine: " hostname
	echo "$hostname" > /mnt/etc/hostname
	cat <<EOF > /mnt/etc/hosts
127.0.0.1	localhost
127.0.1.1	$hostname
# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
check_exit
}

set_pass() {
	echo
	printf '%s\n' "Enter password for the root account (will not echo)"
	arch-chroot /mnt passwd root
	printf '%s\n' "Root password set. You may wish to disable the root account with passwd -l later on."
}

set_default_user() {
	echo
	read -r -p "Enter the name of default user: " name
	arch-chroot /mnt usermod -l "$name" fluxuan
	arch-chroot /mnt usermod -m -d /home/"$name" "$name"
	printf '%s\n' "Password for $name (will not echo):"
	arch-chroot /mnt passwd "$name"
	arch-chroot /mnt usermod -aG wheel,cdrom,floppy,audio,dip,video,plugdev,netdev,sudo "$name"
	arch-chroot /mnt usermod -s /bin/bash "$name"
	check_exit
}


setup_grub() {
	local _mode _disk
	echo
	printf '%s\n' "seting up the GRUB bootloader..."
	_mode=$(d_read MODE)
	_disk=$(d_read DISK)
	if [ "$_mode" == "bios" ]; then
		arch-chroot /mnt grub-install /dev/"$_disk"
		arch-chroot /mnt update-grub
	else
		arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot/efi
		arch-chroot /mnt grub-install /dev/"$_disk"
		arch-chroot /mnt update-grub
	fi
	check_exit
}


finish() {
rm "$CONF"
rm "$rsync_excludes"
	read -r -p "Installation finished. R to reboot, E to exit and continue in the live environment.
> " re
	case "$re" in
		R) reboot ;;
		E) exit ;;
		*) ;;
	esac
}

do_install() {
	printf '%s\n' "Launching the installer..."
	welcome_msg
	install_dep
	mk_disk
	ask_part
	mk_part
	check_excludes
	copy_sys
	gen_fstab
	timezone
	locale
	set_hostname
	set_pass
	set_default_user
	setup_grub
	finish
}

do_install
