#!/bin/bash

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

check_root() {
  if [[ $EUID -ne 0 ]]; then
    whiptail --title "Root Privileges Required" --msgbox "This script must be run as root.\nYou can use ( sudo bash fxs )" 10 40
    exit 1
  fi
}

welcome_msg() {
  whiptail --title "Fluxuan Linux ISO Creation" --msgbox "Welcome to the Fluxuan Linux ISO creation script!" 10 40
}

ask_part() {
  ISONAME=$(whiptail --title "ISO name" --inputbox "Enter a name for the ISO:" 10 40 "" 3>&1 1>&2 2>&3)
  LABEL=$(whiptail --title "ISO Disk Label" --inputbox "Enter disk LABEL for the ISO:" 10 40 "" 3>&1 1>&2 2>&3)
}

install_dependencies() {
  whiptail --title "Installing Dependencies" --infobox "Installing required dependencies..." 10 40
  apt-get update
  apt-get install -y xorriso squashfs-tools
}

create_folders() {
  whiptail --title "Creating Folders" --infobox "Creating necessary folders..." 10 40
  TMP_DIR=$(mktemp -d)
  STAGING_DIR="$TMP_DIR/staging"
  BOOT_DIR="$STAGING_DIR/boot"
  EFI_DIR="$STAGING_DIR/EFI/BOOT"
  ISO_DIR="$SCRIPT_DIR/isofiles"
  mkdir -p "$BOOT_DIR" "$EFI_DIR" "$ISO_DIR"
}

copy_system_files() {
  whiptail --title "Copying System Files" --infobox "Copying system files..." 10 40
  rsync -a --exclude={"/dev/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found"} / "$STAGING_DIR"
}

create_squashfs() {
  whiptail --title "Creating Squashfs Filesystem" --infobox "Creating Squashfs filesystem..." 10 40
  mksquashfs "$STAGING_DIR" "$ISO_DIR/filesystem.squashfs" -noappend -comp xz -Xbcj x86 -b 1024K
}

create_grub_config() {
  whiptail --title "Creating GRUB Configuration" --infobox "Creating GRUB configuration..." 10 40
  cat > "$BOOT_DIR/grub/grub.cfg" <<EOF
set default="0"
set timeout=5

EOF

  for iso in "${ISONAME[@]}"; do
    cat >> "$BOOT_DIR/grub/grub.cfg" <<EOF
menuentry "$iso" {
    set isofile="/boot/$iso"
    loopback loop \$isofile
    linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile splash
    initrd (loop)/casper/initrd
}

EOF
  done

  whiptail --title "Creating GRUB Configuration" --infobox "GRUB configuration created successfully." 10 40
}

create_iso() {
  whiptail --title "Creating ISO" --infobox "Creating ISO..." 10 40

  # Copy splash.png
  cp /boot/splash.png "$BOOT_DIR/grub/"

  # Create the ISO
  OUTPUT_ISO="$SCRIPT_DIR/fluxuan.iso"
  xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames \
    -volid "$LABEL" -appid "$LABEL" -publisher "Fluxuan" \
    -preparer "Fluxuan ISO Creation Script" -eltorito-boot isolinux/isolinux.bin \
    -eltorito-catalog isolinux/boot.cat -no-emul-boot -boot-load-size 4 \
    -boot-info-table -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
    -output "$OUTPUT_ISO" "$ISO_DIR"

  whiptail --title "Creating ISO" --infobox "ISO created successfully." 10 40
}

calculate_md5() {
  whiptail --title "Calculating MD5 Checksum" --infobox "Calculating MD5 checksum..." 10 40
  MD5SUM=$(md5sum "$OUTPUT_ISO" | cut -d ' ' -f 1)
  whiptail --title "Calculating MD5 Checksum" --msgbox "MD5 checksum: $MD5SUM" 10 40
}

main() {
  check_root
  welcome_msg
  ask_part
  install_dependencies
  create_folders
  copy_system_files
  create_grub_config
  create_squashfs
  create_iso
  calculate_md5

  whiptail --title "ISO Creation Completed" --msgbox "ISO creation process completed successfully!" 10 40
}

main
